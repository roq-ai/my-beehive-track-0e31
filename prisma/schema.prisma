generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model bee {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  species    String    @db.VarChar(255)
  hive_id    String    @db.Uuid
  birth_date DateTime? @db.Timestamp(6)
  death_date DateTime? @db.Timestamp(6)
  queen_bee  Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  hive       hive      @relation(fields: [hive_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model harvest {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  harvest_date DateTime? @db.Timestamp(6)
  quantity     Int
  hive_id      String    @db.Uuid
  user_id      String    @db.Uuid
  harvest_type String    @db.VarChar(255)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  hive         hive      @relation(fields: [hive_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model health_check {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  check_date   DateTime? @db.Timestamp(6)
  hive_id      String    @db.Uuid
  user_id      String    @db.Uuid
  check_result String    @db.VarChar(255)
  notes        String?   @db.VarChar(255)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  hive         hive      @relation(fields: [hive_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model hive {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  location         String         @db.VarChar(255)
  creation_date    DateTime?      @db.Timestamp(6)
  destruction_date DateTime?      @db.Timestamp(6)
  user_id          String         @db.Uuid
  hive_status      String         @db.VarChar(255)
  created_at       DateTime       @default(now()) @db.Timestamp(6)
  updated_at       DateTime       @default(now()) @db.Timestamp(6)
  bee              bee[]
  harvest          harvest[]
  health_check     health_check[]
  user             user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model team {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  team_leader String?  @db.VarChar(255)
  team_size   Int?
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  harvest      harvest[]
  health_check health_check[]
  hive         hive[]
  team         team[]
}
